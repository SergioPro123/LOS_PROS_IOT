{"version":3,"sources":["./node_modules/ng2-mqtt/mqttws31.js","./src/app/componentsIoT/control/control.component.html","./src/app/componentsIoT/monitor/monitor.component.html","./src/app/componentsIoT/setting/setting.component.html","./src/app/home/home.page.html","./src/app/componentsIoT/control/control.component.scss","./src/app/componentsIoT/control/control.component.ts","./src/app/componentsIoT/monitor/monitor.component.scss","./src/app/componentsIoT/monitor/monitor.component.ts","./src/app/componentsIoT/setting/setting.component.scss","./src/app/componentsIoT/setting/setting.component.ts","./src/app/home/home-routing.module.ts","./src/app/home/home.module.ts","./src/app/home/home.page.scss","./src/app/home/home.page.ts","./src/app/services/iot.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,uB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA,E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY,OAAO;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,+BAA+B;AACtC,oBAAoB,8CAA8C;AAClE,sBAAsB,+CAA+C;AACrE,wBAAwB,iDAAiD;AACzE,iBAAiB,0CAA0C;AAC3D,mBAAmB,yDAAyD,EAAE,gBAAgB,EAAE,EAAE;AAClG,uBAAuB,kDAAkD,EAAE,EAAE,EAAE,GAAG;AAClF,iBAAiB,uCAAuC,EAAE,GAAG;AAC7D,iBAAiB,yCAAyC;AAC1D,kBAAkB,6CAA6C,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;AAC5E,gBAAgB,2BAA2B,EAAE,oCAAoC;AACjF,kBAAkB,yCAAyC,EAAE,GAAG;AAChE,iBAAiB,wCAAwC,EAAE,MAAM,EAAE,GAAG;AACtE,qBAAqB,4CAA4C,EAAE,MAAM,EAAE,GAAG;AAC9E,0BAA0B,kDAAkD;AAC5E,wBAAwB,6DAA6D,EAAE,QAAQ,EAAE,GAAG;AACpG,8BAA8B,qDAAqD,EAAE,GAAG;AACxF,sBAAsB,oDAAoD,EAAE,EAAE,EAAE,GAAG;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA,kBAAkB;AAClB,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA,yC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iCAAiC;AACjC,2BAA2B;AAC3B;AACA,0CAA0C;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,E;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yD;AACA;;AAEA;AACA;AACA;;AAEA,8B;AACA;;AAEA;AACA,gCAAgC;AAChC,iCAAiC;AACjC;AACA,E;;AAEA;AACA;AACA;AACA;AACA,E;;AAEA;AACA;AACA,E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI,+B;AACJ;AACA,+C;AACA,+C;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,G;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2D;AACA,wB;AACA;AACA,mD;AACA;;AAEA,+D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,sC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,G;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,yE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2C;AACA,GAAG;AACH,6B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,4BAA4B,2EAA2E;AACxJ;;AAEA;AACA,gDAAgD,4BAA4B,yEAAyE;AACrJ;;AAEA;AACA;AACA,SAAS;AACT;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0E;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC,8BAA8B,uDAAuD;AAC3H;AACA;AACA;AACA,SAAS;AACT;AACA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,W;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6C;AACA;AACA,8B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qC;AACA;;AAEA,W;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mE;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qD;AACA;AACA,+E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE,gCAAgC;AAClG,+CAA+C,OAAO;AACtD;AACA;AACA,gEAAgE,gDAAgD;AAChH;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,wDAAwD;AAC5F;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA+D,gDAAgD;AAC/G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gDAAgD;AAChH,2C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,gDAAgD;AAC9G;AACA;AACA;;AAEA;AACA;AACA;AACA,8DAA8D,gDAAgD;AAC9G;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAA4C,E;AACxE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,mD;AACA,MAAM;AACN;AACA,M;AACA,KAAK;AACL,oCAAoC,qGAAqG;AACzI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,I;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;;AAEA;AACA,qC;AACA,0CAA0C,SAAS;AACnD,gE;AACA,+B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mEAAmE,uBAAuB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA,eAAe,SAAS;AACxB;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC,yC;AACA,mD;AACA,SAAS;AACT,I;AACA;AACA,G;AACA;AACA,2E;;AAEA;AACA,+BAA+B,aAAa;AAC5C,8BAA8B,sDAAsD;;AAEpF,8BAA8B,aAAa;AAC3C,8BAA8B,sDAAsD;;AAEpF,8BAA8B,aAAa;AAC3C,8BAA8B,sDAAsD;;AAEpF,6BAA6B,YAAY;AACzC,6BAA6B,sDAAsD;;AAEnF,kCAAkC,wBAAwB;AAC1D,kCAAkC,sDAAsD;;AAExF,0CAA0C,gCAAgC;AAC1E,6D;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,kCAAkC;AAC9E,iE;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,gCAAgC;AAC1E,6D;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,kBAAkB;AAC/B;AACA,aAAa,OAAO;AACpB;AACA;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA,wCAAwC;AACxC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,gCAAgC;AAChC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AAC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","file":"home-home-module-es2015.js","sourcesContent":["/*******************************************************************************\r\n * Copyright (c) 2013 IBM Corp.\r\n *\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * and Eclipse Distribution License v1.0 which accompany this distribution. \r\n *\r\n * The Eclipse Public License is available at \r\n *    http://www.eclipse.org/legal/epl-v10.html\r\n * and the Eclipse Distribution License is available at \r\n *   http://www.eclipse.org/org/documents/edl-v10.php.\r\n *\r\n * Contributors:\r\n *    Andrew Banks - initial API and implementation and initial documentation\r\n *******************************************************************************/\r\n\r\n\r\n// Only expose a single object name in the global namespace.\r\n// Everything must go through this module. Global Paho.MQTT module\r\n// only has a single public function, client, which returns\r\n// a Paho.MQTT client object given connection details.\r\n \r\n/**\r\n * Send and receive messages using web browsers.\r\n * <p> \r\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\r\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\r\n *  \r\n * The function supported includes:\r\n * <ol>\r\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number. \r\n * <li>Specifying options that relate to the communications link with the server, \r\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\r\n * <li>Subscribing to and receiving messages from MQTT Topics.\r\n * <li>Publishing messages to MQTT Topics.\r\n * </ol>\r\n * <p>\r\n * The API consists of two main objects:\r\n * <dl>\r\n * <dt><b>{@link Paho.MQTT.Client}</b></dt>\r\n * <dd>This contains methods that provide the functionality of the API,\r\n * including provision of callbacks that notify the application when a message\r\n * arrives from or is delivered to the messaging server,\r\n * or when the status of its connection to the messaging server changes.</dd>\r\n * <dt><b>{@link Paho.MQTT.Message}</b></dt>\r\n * <dd>This encapsulates the payload of the message along with various attributes\r\n * associated with its delivery, in particular the destination to which it has\r\n * been (or is about to be) sent.</dd>\r\n * </dl> \r\n * <p>\r\n * The programming interface validates parameters passed to it, and will throw\r\n * an Error containing an error message intended for developer use, if it detects\r\n * an error with any parameter.\r\n * <p>\r\n * Example:\r\n * \r\n * <code><pre>\r\nclient = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\r\nclient.onConnectionLost = onConnectionLost;\r\nclient.onMessageArrived = onMessageArrived;\r\nclient.connect({onSuccess:onConnect});\r\n\r\nfunction onConnect() {\r\n  // Once a connection has been made, make a subscription and send a message.\r\n  console.log(\"onConnect\");\r\n  client.subscribe(\"/World\");\r\n  message = new Paho.MQTT.Message(\"Hello\");\r\n  message.destinationName = \"/World\";\r\n  client.send(message); \r\n};\r\nfunction onConnectionLost(responseObject) {\r\n  if (responseObject.errorCode !== 0)\r\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\r\n};\r\nfunction onMessageArrived(message) {\r\n  console.log(\"onMessageArrived:\"+message.payloadString);\r\n  client.disconnect(); \r\n};\t\r\n * </pre></code>\r\n * @namespace Paho.MQTT \r\n */\r\n\r\nif (typeof Paho === \"undefined\") {\r\n\tPaho = {};\r\n}\r\n\r\nPaho.MQTT = (function (global) {\r\n\r\n\t// Private variables below, these are only visible inside the function closure\r\n\t// which is used to define the module. \r\n\r\n\tvar version = \"@VERSION@\";\r\n\tvar buildLevel = \"@BUILDLEVEL@\";\r\n\t\r\n\t/** \r\n\t * Unique message type identifiers, with associated\r\n\t * associated integer values.\r\n\t * @private \r\n\t */\r\n\tvar MESSAGE_TYPE = {\r\n\t\tCONNECT: 1, \r\n\t\tCONNACK: 2, \r\n\t\tPUBLISH: 3,\r\n\t\tPUBACK: 4,\r\n\t\tPUBREC: 5, \r\n\t\tPUBREL: 6,\r\n\t\tPUBCOMP: 7,\r\n\t\tSUBSCRIBE: 8,\r\n\t\tSUBACK: 9,\r\n\t\tUNSUBSCRIBE: 10,\r\n\t\tUNSUBACK: 11,\r\n\t\tPINGREQ: 12,\r\n\t\tPINGRESP: 13,\r\n\t\tDISCONNECT: 14\r\n\t};\r\n\t\r\n\t// Collection of utility methods used to simplify module code \r\n\t// and promote the DRY pattern.  \r\n\r\n\t/**\r\n\t * Validate an object's parameter names to ensure they \r\n\t * match a list of expected variables name for this option\r\n\t * type. Used to ensure option object passed into the API don't\r\n\t * contain erroneous parameters.\r\n\t * @param {Object} obj - User options object\r\n\t * @param {Object} keys - valid keys and types that may exist in obj. \r\n\t * @throws {Error} Invalid option parameter found. \r\n\t * @private \r\n\t */\r\n\tvar validate = function(obj, keys) {\r\n\t\tfor (var key in obj) {\r\n\t\t\tif (obj.hasOwnProperty(key)) {       \t\t\r\n\t\t\t\tif (keys.hasOwnProperty(key)) {\r\n\t\t\t\t\tif (typeof obj[key] !== keys[key])\r\n\t\t\t\t\t   throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\r\n\t\t\t\t} else {\t\r\n\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\r\n\t\t\t\t\tfor (var key in keys)\r\n\t\t\t\t\t\tif (keys.hasOwnProperty(key))\r\n\t\t\t\t\t\t\terrorStr = errorStr+\" \"+key;\r\n\t\t\t\t\tthrow new Error(errorStr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return a new function which runs the user function bound\r\n\t * to a fixed scope. \r\n\t * @param {function} User function\r\n\t * @param {object} Function scope  \r\n\t * @return {function} User function bound to another scope\r\n\t * @private \r\n\t */\r\n\tvar scope = function (f, scope) {\r\n\t\treturn function () {\r\n\t\t\treturn f.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\t\r\n\t/** \r\n\t * Unique message type identifiers, with associated\r\n\t * associated integer values.\r\n\t * @private \r\n\t */\r\n\tvar ERROR = {\r\n\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\r\n\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\r\n\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"}, \r\n\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\r\n\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\r\n\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\r\n\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\r\n\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\r\n\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\r\n\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\r\n\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\r\n\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\r\n\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\r\n\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\r\n\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\r\n\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\r\n\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\r\n\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\r\n\t};\r\n\t\r\n\t/** CONNACK RC Meaning. */\r\n\tvar CONNACK_RC = {\r\n\t\t0:\"Connection Accepted\",\r\n\t\t1:\"Connection Refused: unacceptable protocol version\",\r\n\t\t2:\"Connection Refused: identifier rejected\",\r\n\t\t3:\"Connection Refused: server unavailable\",\r\n\t\t4:\"Connection Refused: bad user name or password\",\r\n\t\t5:\"Connection Refused: not authorized\"\r\n\t};\r\n\r\n\t/**\r\n\t * Format an error message text.\r\n\t * @private\r\n\t * @param {error} ERROR.KEY value above.\r\n\t * @param {substitutions} [array] substituted into the text.\r\n\t * @return the text with the substitutions made.\r\n\t */\r\n\tvar format = function(error, substitutions) {\r\n\t\tvar text = error.text;\r\n\t\tif (substitutions) {\r\n\t\t  var field,start;\r\n\t\t  for (var i=0; i<substitutions.length; i++) {\r\n\t\t\tfield = \"{\"+i+\"}\";\r\n\t\t\tstart = text.indexOf(field);\r\n\t\t\tif(start > 0) {\r\n\t\t\t\tvar part1 = text.substring(0,start);\r\n\t\t\t\tvar part2 = text.substring(start+field.length);\r\n\t\t\t\ttext = part1+substitutions[i]+part2;\r\n\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n\t\treturn text;\r\n\t};\r\n\t\r\n\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\r\n\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\r\n\t//MQTT proto/version for 311         4    M    Q    T    T    4\r\n\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\r\n\t\r\n\t/**\r\n\t * Construct an MQTT wire protocol message.\r\n\t * @param type MQTT packet type.\r\n\t * @param options optional wire message attributes.\r\n\t * \r\n\t * Optional properties\r\n\t * \r\n\t * messageIdentifier: message ID in the range [0..65535]\r\n\t * payloadMessage:\tApplication Message - PUBLISH only\r\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\r\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\r\n\t * requestQoS:\t\tarray of QoS values [0..2]\r\n\t *  \r\n\t * \"Flag\" properties \r\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\r\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\r\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\r\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\r\n\t * password:\t\ttrue if present / false if absent (CONNECT)\r\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\r\n\t *\r\n\t * @private\r\n\t * @ignore\r\n\t */\r\n\tvar WireMessage = function (type, options) { \t\r\n\t\tthis.type = type;\r\n\t\tfor (var name in options) {\r\n\t\t\tif (options.hasOwnProperty(name)) {\r\n\t\t\t\tthis[name] = options[name];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tWireMessage.prototype.encode = function() {\r\n\t\t// Compute the first byte of the fixed header\r\n\t\tvar first = ((this.type & 0x0f) << 4);\r\n\t\t\r\n\t\t/*\r\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\r\n\t\t * of all the component parts\r\n\t\t */\r\n\r\n\t\tvar remLength = 0;\r\n\t\tvar topicStrLength = new Array();\r\n\t\tvar destinationNameLength = 0;\r\n\t\t\r\n\t\t// if the message contains a messageIdentifier then we need two bytes for that\r\n\t\tif (this.messageIdentifier != undefined)\r\n\t\t\tremLength += 2;\r\n\r\n\t\tswitch(this.type) {\r\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\r\n\t\t\tcase MESSAGE_TYPE.CONNECT:\r\n\t\t\t\tswitch(this.mqttVersion) {\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\r\n\t\t\t\tif (this.willMessage != undefined) {\r\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\r\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\r\n\t\t\t\t\tvar willMessagePayloadBytes = this.willMessage.payloadBytes;\r\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\r\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\r\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.userName != undefined)\r\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\t\r\n\t\t\t\tif (this.password != undefined)\r\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\r\n\t\t\tbreak;\r\n\r\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\r\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\t        \t\r\n\t\t\t\tfirst |= 0x02; // Qos = 1;\r\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\r\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\r\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\r\n\t\t\t\t}\r\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\r\n\t\t\t\t// QoS on Subscribe only\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\r\n\t\t\t\tfirst |= 0x02; // Qos = 1;\r\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\r\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\r\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.PUBREL:\r\n\t\t\t\tfirst |= 0x02; // Qos = 1;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\r\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\r\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\r\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\r\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\r\n\t\t\t\tremLength += destinationNameLength + 2;\t   \r\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\r\n\t\t\t\tremLength += payloadBytes.byteLength;  \r\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\r\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\r\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\r\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t;\r\n\t\t}\r\n\r\n\t\t// Now we can allocate a buffer for the message\r\n\r\n\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\r\n\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\r\n\t\tvar buffer = new ArrayBuffer(remLength + pos);\r\n\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\r\n\r\n\t\t//Write the fixed header into the buffer\r\n\t\tbyteStream[0] = first;\r\n\t\tbyteStream.set(mbi,1);\r\n\r\n\t\t// If this is a PUBLISH then the variable header starts with a topic\r\n\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\r\n\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\r\n\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\r\n\t\t\r\n\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\r\n\t\t\tswitch (this.mqttVersion) {\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\r\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\r\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar connectFlags = 0;\r\n\t\t\tif (this.cleanSession) \r\n\t\t\t\tconnectFlags = 0x02;\r\n\t\t\tif (this.willMessage != undefined ) {\r\n\t\t\t\tconnectFlags |= 0x04;\r\n\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\r\n\t\t\t\tif (this.willMessage.retained) {\r\n\t\t\t\t\tconnectFlags |= 0x20;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.userName != undefined)\r\n\t\t\t\tconnectFlags |= 0x80;\r\n\t\t\tif (this.password != undefined)\r\n\t\t\t\tconnectFlags |= 0x40;\r\n\t\t\tbyteStream[pos++] = connectFlags; \r\n\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\r\n\t\t}\r\n\r\n\t\t// Output the messageIdentifier - if there is one\r\n\t\tif (this.messageIdentifier != undefined)\r\n\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\r\n\r\n\t\tswitch(this.type) {\r\n\t\t\tcase MESSAGE_TYPE.CONNECT:\r\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos); \r\n\t\t\t\tif (this.willMessage != undefined) {\r\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\r\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\r\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\r\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\tif (this.userName != undefined)\r\n\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\r\n\t\t\tif (this.password != undefined) \r\n\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\r\n\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\t\r\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\t\r\n\t\t\t\tbyteStream.set(payloadBytes, pos);\r\n\t\t\t\t\t\r\n\t\t\t\tbreak;\r\n\r\n//    \t    case MESSAGE_TYPE.PUBREC:\t\r\n//    \t    case MESSAGE_TYPE.PUBREL:\t\r\n//    \t    case MESSAGE_TYPE.PUBCOMP:\t\r\n//    \t    \tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\r\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\r\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\r\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\r\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\t\r\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\r\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\r\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t// Do nothing.\r\n\t\t}\r\n\r\n\t\treturn buffer;\r\n\t}\t\r\n\r\n\tfunction decodeMessage(input,pos) {\r\n\t    var startingPos = pos;\r\n\t\tvar first = input[pos];\r\n\t\tvar type = first >> 4;\r\n\t\tvar messageInfo = first &= 0x0f;\r\n\t\tpos += 1;\r\n\t\t\r\n\r\n\t\t// Decode the remaining length (MBI format)\r\n\r\n\t\tvar digit;\r\n\t\tvar remLength = 0;\r\n\t\tvar multiplier = 1;\r\n\t\tdo {\r\n\t\t\tif (pos == input.length) {\r\n\t\t\t    return [null,startingPos];\r\n\t\t\t}\r\n\t\t\tdigit = input[pos++];\r\n\t\t\tremLength += ((digit & 0x7F) * multiplier);\r\n\t\t\tmultiplier *= 128;\r\n\t\t} while ((digit & 0x80) != 0);\r\n\t\t\r\n\t\tvar endPos = pos+remLength;\r\n\t\tif (endPos > input.length) {\r\n\t\t    return [null,startingPos];\r\n\t\t}\r\n\r\n\t\tvar wireMessage = new WireMessage(type);\r\n\t\tswitch(type) {\r\n\t\t\tcase MESSAGE_TYPE.CONNACK:\r\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\r\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\r\n\t\t\t\t\twireMessage.sessionPresent = true;\r\n\t\t\t\twireMessage.returnCode = input[pos++];\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.PUBLISH:     \t    \t\r\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvar len = readUint16(input, pos);\r\n\t\t\t\tpos += 2;\r\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\r\n\t\t\t\tpos += len;\r\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\r\n\t\t\t\tif (qos > 0) {\r\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\r\n\t\t\t\t\tpos += 2;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar message = new Paho.MQTT.Message(input.subarray(pos, endPos));\r\n\t\t\t\tif ((messageInfo & 0x01) == 0x01) \r\n\t\t\t\t\tmessage.retained = true;\r\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\r\n\t\t\t\t\tmessage.duplicate =  true;\r\n\t\t\t\tmessage.qos = qos;\r\n\t\t\t\tmessage.destinationName = topicName;\r\n\t\t\t\twireMessage.payloadMessage = message;\t\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\r\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\t    \r\n\t\t\tcase  MESSAGE_TYPE.PUBREL:    \r\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\r\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:    \t    \t\r\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\r\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\r\n\t\t\t\tpos += 2;\r\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\t\r\n\t\t\t\tbreak;\r\n\t\t\r\n\t\t\tdefault:\r\n\t\t\t\t;\r\n\t\t}\r\n\t\t\t\t\r\n\t\treturn [wireMessage,endPos];\t\r\n\t}\r\n\r\n\tfunction writeUint16(input, buffer, offset) {\r\n\t\tbuffer[offset++] = input >> 8;      //MSB\r\n\t\tbuffer[offset++] = input % 256;     //LSB \r\n\t\treturn offset;\r\n\t}\t\r\n\r\n\tfunction writeString(input, utf8Length, buffer, offset) {\r\n\t\toffset = writeUint16(utf8Length, buffer, offset);\r\n\t\tstringToUTF8(input, buffer, offset);\r\n\t\treturn offset + utf8Length;\r\n\t}\t\r\n\r\n\tfunction readUint16(buffer, offset) {\r\n\t\treturn 256*buffer[offset] + buffer[offset+1];\r\n\t}\t\r\n\r\n\t/**\r\n\t * Encodes an MQTT Multi-Byte Integer\r\n\t * @private \r\n\t */\r\n\tfunction encodeMBI(number) {\r\n\t\tvar output = new Array(1);\r\n\t\tvar numBytes = 0;\r\n\r\n\t\tdo {\r\n\t\t\tvar digit = number % 128;\r\n\t\t\tnumber = number >> 7;\r\n\t\t\tif (number > 0) {\r\n\t\t\t\tdigit |= 0x80;\r\n\t\t\t}\r\n\t\t\toutput[numBytes++] = digit;\r\n\t\t} while ( (number > 0) && (numBytes<4) );\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\r\n\t * @private\r\n\t */\r\n\tfunction UTF8Length(input) {\r\n\t\tvar output = 0;\r\n\t\tfor (var i = 0; i<input.length; i++) \r\n\t\t{\r\n\t\t\tvar charCode = input.charCodeAt(i);\r\n\t\t\t\tif (charCode > 0x7FF)\r\n\t\t\t\t   {\r\n\t\t\t\t\t  // Surrogate pair means its a 4 byte character\r\n\t\t\t\t\t  if (0xD800 <= charCode && charCode <= 0xDBFF)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t  i++;\r\n\t\t\t\t\t\t  output++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t   output +=3;\r\n\t\t\t\t   }\r\n\t\t\telse if (charCode > 0x7F)\r\n\t\t\t\toutput +=2;\r\n\t\t\telse\r\n\t\t\t\toutput++;\r\n\t\t} \r\n\t\treturn output;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\r\n\t * @private\r\n\t */\r\n\tfunction stringToUTF8(input, output, start) {\r\n\t\tvar pos = start;\r\n\t\tfor (var i = 0; i<input.length; i++) {\r\n\t\t\tvar charCode = input.charCodeAt(i);\r\n\t\t\t\r\n\t\t\t// Check for a surrogate pair.\r\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\r\n\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\r\n\t\t\t\tif (isNaN(lowCharCode)) {\r\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\r\n\t\t\t\t}\r\n\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (charCode <= 0x7F) {\r\n\t\t\t\toutput[pos++] = charCode;\r\n\t\t\t} else if (charCode <= 0x7FF) {\r\n\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\r\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\r\n\t\t\t} else if (charCode <= 0xFFFF) {    \t\t\t\t    \r\n\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\r\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;   \r\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;   \r\n\t\t\t} else {\r\n\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\r\n\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\r\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\r\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\r\n\t\t\t};\r\n\t\t} \r\n\t\treturn output;\r\n\t}\r\n\t\r\n\tfunction parseUTF8(input, offset, length) {\r\n\t\tvar output = \"\";\r\n\t\tvar utf16;\r\n\t\tvar pos = offset;\r\n\r\n\t\twhile (pos < offset+length)\r\n\t\t{\r\n\t\t\tvar byte1 = input[pos++];\r\n\t\t\tif (byte1 < 128)\r\n\t\t\t\tutf16 = byte1;\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tvar byte2 = input[pos++]-128;\r\n\t\t\t\tif (byte2 < 0) \r\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\r\n\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\r\n\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\r\n\t\t\t\telse \r\n\t\t\t\t{ \r\n\t\t\t\t\tvar byte3 = input[pos++]-128;\r\n\t\t\t\t\tif (byte3 < 0) \r\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\r\n\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\r\n\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t   var byte4 = input[pos++]-128;\r\n\t\t\t\t\t\t\t\t   if (byte4 < 0) \r\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\r\n\t\t\t\t\t\t\t\t   if (byte1 < 0xF8)        // 4 byte character \r\n\t\t\t\t\t\t\t\t\t\t   utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\r\n\t\t\t\t\t   else                     // longer encodings are not supported  \r\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}  \r\n\r\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\r\n\t\t\t\t  {\r\n\t\t\t\t\t utf16 -= 0x10000;\r\n\t\t\t\t\t output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\r\n\t\t\t\t\t utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\r\n\t\t\t\t  }\r\n\t\t\toutput += String.fromCharCode(utf16);\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\t\r\n\t/** \r\n\t * Repeat keepalive requests, monitor responses.\r\n\t * @ignore\r\n\t */\r\n\tvar Pinger = function(client, window, keepAliveInterval) { \r\n\t\tthis._client = client;        \t\r\n\t\tthis._window = window;\r\n\t\tthis._keepAliveInterval = keepAliveInterval*1000;     \t\r\n\t\tthis.isReset = false;\r\n\t\t\r\n\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode(); \r\n\t\t\r\n\t\tvar doTimeout = function (pinger) {\r\n\t\t\treturn function () {\r\n\t\t\t\treturn doPing.apply(pinger);\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\t/** @ignore */\r\n\t\tvar doPing = function() { \r\n\t\t\tif (!this.isReset) {\r\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\r\n\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\r\n\t\t\t} else {\r\n\t\t\t\tthis.isReset = false;\r\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\r\n\t\t\t\tthis._client.socket.send(pingReq); \r\n\t\t\t\tthis.timeout = this._window.setTimeout(doTimeout(this), this._keepAliveInterval);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.reset = function() {\r\n\t\t\tthis.isReset = true;\r\n\t\t\tthis._window.clearTimeout(this.timeout);\r\n\t\t\tif (this._keepAliveInterval > 0)\r\n\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\r\n\t\t}\r\n\r\n\t\tthis.cancel = function() {\r\n\t\t\tthis._window.clearTimeout(this.timeout);\r\n\t\t}\r\n\t }; \r\n\r\n\t/**\r\n\t * Monitor request completion.\r\n\t * @ignore\r\n\t */\r\n\tvar Timeout = function(client, window, timeoutSeconds, action, args) {\r\n\t\tthis._window = window;\r\n\t\tif (!timeoutSeconds)\r\n\t\t\ttimeoutSeconds = 30;\r\n\t\t\r\n\t\tvar doTimeout = function (action, client, args) {\r\n\t\t\treturn function () {\r\n\t\t\t\treturn action.apply(client, args);\r\n\t\t\t};\r\n\t\t};\r\n\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\r\n\t\t\r\n\t\tthis.cancel = function() {\r\n\t\t\tthis._window.clearTimeout(this.timeout);\r\n\t\t}\r\n\t}; \r\n\t\r\n\t/*\r\n\t * Internal implementation of the Websockets MQTT V3.1 client.\r\n\t * \r\n\t * @name Paho.MQTT.ClientImpl @constructor \r\n\t * @param {String} host the DNS nameof the webSocket host. \r\n\t * @param {Number} port the port number for that host.\r\n\t * @param {String} clientId the MQ client identifier.\r\n\t */\r\n\tvar ClientImpl = function (uri, host, port, path, clientId) {\r\n\t\t// Check dependencies are satisfied in this browser.\r\n\t\tif (!(\"WebSocket\" in global && global[\"WebSocket\"] !== null)) {\r\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\r\n\t\t}\r\n\t\tif (!(\"localStorage\" in global && global[\"localStorage\"] !== null)) {\r\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"localStorage\"]));\r\n\t\t}\r\n\t\tif (!(\"ArrayBuffer\" in global && global[\"ArrayBuffer\"] !== null)) {\r\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\r\n\t\t}\r\n\t\tthis._trace(\"Paho.MQTT.Client\", uri, host, port, path, clientId);\r\n\r\n\t\tthis.host = host;\r\n\t\tthis.port = port;\r\n\t\tthis.path = path;\r\n\t\tthis.uri = uri;\r\n\t\tthis.clientId = clientId;\r\n\r\n\t\t// Local storagekeys are qualified with the following string.\r\n\t\t// The conditional inclusion of path in the key is for backward\r\n\t\t// compatibility to when the path was not configurable and assumed to\r\n\t\t// be /mqtt\r\n\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\r\n\r\n\t\t// Create private instance-only message queue\r\n\t\t// Internal queue of messages to be sent, in sending order. \r\n\t\tthis._msg_queue = [];\r\n\r\n\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids. \r\n\t\tthis._sentMessages = {};\r\n\r\n\t\t// Messages we have received and acknowleged and are expecting a confirm message for\r\n\t\t// indexed by their respective message ids. \r\n\t\tthis._receivedMessages = {};\r\n\r\n\t\t// Internal list of callbacks to be executed when messages\r\n\t\t// have been successfully sent over web socket, e.g. disconnect\r\n\t\t// when it doesn't have to wait for ACK, just message is dispatched.\r\n\t\tthis._notify_msg_sent = {};\r\n\r\n\t\t// Unique identifier for SEND messages, incrementing\r\n\t\t// counter as messages are sent.\r\n\t\tthis._message_identifier = 1;\r\n\t\t\r\n\t\t// Used to determine the transmission sequence of stored sent messages.\r\n\t\tthis._sequence = 0;\r\n\t\t\r\n\r\n\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.   \t\r\n\t\tfor (var key in localStorage)\r\n\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) == 0  \t\t    \r\n\t\t\t\t|| key.indexOf(\"Received:\"+this._localKey) == 0)\r\n\t\t\tthis.restore(key);\r\n\t};\r\n\r\n\t// Messaging Client public instance members. \r\n\tClientImpl.prototype.host;\r\n\tClientImpl.prototype.port;\r\n\tClientImpl.prototype.path;\r\n\tClientImpl.prototype.uri;\r\n\tClientImpl.prototype.clientId;\r\n\r\n\t// Messaging Client private instance members.\r\n\tClientImpl.prototype.socket;\r\n\t/* true once we have received an acknowledgement to a CONNECT packet. */\r\n\tClientImpl.prototype.connected = false;\r\n\t/* The largest message identifier allowed, may not be larger than 2**16 but \r\n\t * if set smaller reduces the maximum number of outbound messages allowed.\r\n\t */ \r\n\tClientImpl.prototype.maxMessageIdentifier = 65536;\r\n\tClientImpl.prototype.connectOptions;\r\n\tClientImpl.prototype.hostIndex;\r\n\tClientImpl.prototype.onConnectionLost;\r\n\tClientImpl.prototype.onMessageDelivered;\r\n\tClientImpl.prototype.onMessageArrived;\r\n\tClientImpl.prototype.traceFunction;\r\n\tClientImpl.prototype._msg_queue = null;\r\n\tClientImpl.prototype._connectTimeout;\r\n\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\r\n\tClientImpl.prototype.sendPinger = null;\r\n\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\r\n\tClientImpl.prototype.receivePinger = null;\r\n\t\r\n\tClientImpl.prototype.receiveBuffer = null;\r\n\t\r\n\tClientImpl.prototype._traceBuffer = null;\r\n\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\r\n\r\n\tClientImpl.prototype.connect = function (connectOptions) {\r\n\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\"); \r\n\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\r\n\t\t\r\n\t\tif (this.connected) \r\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\r\n\t\tif (this.socket)\r\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\r\n\t\t\r\n\t\tthis.connectOptions = connectOptions;\r\n\t\t\r\n\t\tif (connectOptions.uris) {\r\n\t\t\tthis.hostIndex = 0;\r\n\t\t\tthis._doConnect(connectOptions.uris[0]);  \r\n\t\t} else {\r\n\t\t\tthis._doConnect(this.uri);  \t\t\r\n\t\t}\r\n\t\t\r\n\t};\r\n\r\n\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\r\n\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\r\n\t\t\t  \r\n\t\tif (!this.connected)\r\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\r\n\t\t\r\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\r\n\t\twireMessage.topics=[filter];\r\n\t\tif (subscribeOptions.qos != undefined)\r\n\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\r\n\t\telse \r\n\t\t\twireMessage.requestedQos = [0];\r\n\t\t\r\n\t\tif (subscribeOptions.onSuccess) {\r\n\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\r\n\t\t}\r\n\r\n\t\tif (subscribeOptions.onFailure) {\r\n\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode});};\r\n\t\t}\r\n\r\n\t\tif (subscribeOptions.timeout) {\r\n\t\t\twireMessage.timeOut = new Timeout(this, window, subscribeOptions.timeout, subscribeOptions.onFailure\r\n\t\t\t\t\t, [{invocationContext:subscribeOptions.invocationContext, \r\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code, \r\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\r\n\t\t}\r\n\t\t\r\n\t\t// All subscriptions return a SUBACK. \r\n\t\tthis._requires_ack(wireMessage);\r\n\t\tthis._schedule_message(wireMessage);\r\n\t};\r\n\r\n\t/** @ignore */\r\n\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {  \r\n\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\r\n\t\t\r\n\t\tif (!this.connected)\r\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\r\n\t\t\r\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\r\n\t\twireMessage.topics = [filter];\r\n\t\t\r\n\t\tif (unsubscribeOptions.onSuccess) {\r\n\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\r\n\t\t}\r\n\t\tif (unsubscribeOptions.timeout) {\r\n\t\t\twireMessage.timeOut = new Timeout(this, window, unsubscribeOptions.timeout, unsubscribeOptions.onFailure\r\n\t\t\t\t\t, [{invocationContext:unsubscribeOptions.invocationContext,\r\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\r\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\r\n\t\t}\r\n\t \r\n\t\t// All unsubscribes return a SUBACK.         \r\n\t\tthis._requires_ack(wireMessage);\r\n\t\tthis._schedule_message(wireMessage);\r\n\t};\r\n\t \r\n\tClientImpl.prototype.send = function (message) {\r\n\t\tthis._trace(\"Client.send\", message);\r\n\r\n\t\tif (!this.connected)\r\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\r\n\t\t\r\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\r\n\t\twireMessage.payloadMessage = message;\r\n\t\t\r\n\t\tif (message.qos > 0)\r\n\t\t\tthis._requires_ack(wireMessage);\r\n\t\telse if (this.onMessageDelivered)\r\n\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\r\n\t\tthis._schedule_message(wireMessage);\r\n\t};\r\n\t\r\n\tClientImpl.prototype.disconnect = function () {\r\n\t\tthis._trace(\"Client.disconnect\");\r\n\r\n\t\tif (!this.socket)\r\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\r\n\t\t\r\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\r\n\r\n\t\t// Run the disconnected call back as soon as the message has been sent,\r\n\t\t// in case of a failure later on in the disconnect processing.\r\n\t\t// as a consequence, the _disconected call back may be run several times.\r\n\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\r\n\r\n\t\tthis._schedule_message(wireMessage);\r\n\t};\r\n\t\r\n\tClientImpl.prototype.getTraceLog = function () {\r\n\t\tif ( this._traceBuffer !== null ) {\r\n\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\r\n\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\r\n\t\t\tfor (var key in this._sentMessages)\r\n\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\r\n\t\t\tfor (var key in this._receivedMessages)\r\n\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\r\n\t\t\t\r\n\t\t\treturn this._traceBuffer;\r\n\t\t}\r\n\t};\r\n\t\r\n\tClientImpl.prototype.startTrace = function () {\r\n\t\tif ( this._traceBuffer === null ) {\r\n\t\t\tthis._traceBuffer = [];\r\n\t\t}\r\n\t\tthis._trace(\"Client.startTrace\", new Date(), version);\r\n\t};\r\n\t\r\n\tClientImpl.prototype.stopTrace = function () {\r\n\t\tdelete this._traceBuffer;\r\n\t};\r\n\r\n\tClientImpl.prototype._doConnect = function (wsurl) { \t        \r\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters. \r\n\t\tif (this.connectOptions.useSSL) {\r\n\t\t    var uriParts = wsurl.split(\":\");\r\n\t\t    uriParts[0] = \"wss\";\r\n\t\t    wsurl = uriParts.join(\":\");\r\n\t\t}\r\n\t\tthis.connected = false;\r\n\t\tif (this.connectOptions.mqttVersion < 4) {\r\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\r\n\t\t} else {\r\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\r\n\t\t}\r\n\t\tthis.socket.binaryType = 'arraybuffer';\r\n\t\t\r\n\t\tthis.socket.onopen = scope(this._on_socket_open, this);\r\n\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\r\n\t\tthis.socket.onerror = scope(this._on_socket_error, this);\r\n\t\tthis.socket.onclose = scope(this._on_socket_close, this);\r\n\t\t\r\n\t\tthis.sendPinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\r\n\t\tthis.receivePinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\r\n\t\t\r\n\t\tthis._connectTimeout = new Timeout(this, window, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\r\n\t};\r\n\r\n\t\r\n\t// Schedule a new message to be sent over the WebSockets\r\n\t// connection. CONNECT messages cause WebSocket connection\r\n\t// to be started. All other messages are queued internally\r\n\t// until this has happened. When WS connection starts, process\r\n\t// all outstanding messages. \r\n\tClientImpl.prototype._schedule_message = function (message) {\r\n\t\tthis._msg_queue.push(message);\r\n\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK. \r\n\t\tif (this.connected) {\r\n\t\t\tthis._process_queue();\r\n\t\t}\r\n\t};\r\n\r\n\tClientImpl.prototype.store = function(prefix, wireMessage) {\r\n\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\r\n\t\t\r\n\t\tswitch(wireMessage.type) {\r\n\t\t  case MESSAGE_TYPE.PUBLISH:\r\n\t\t\t  if(wireMessage.pubRecReceived)\r\n\t\t\t\t  storedMessage.pubRecReceived = true;\r\n\t\t\t  \r\n\t\t\t  // Convert the payload to a hex string.\r\n\t\t\t  storedMessage.payloadMessage = {};\r\n\t\t\t  var hex = \"\";\r\n\t\t\t  var messageBytes = wireMessage.payloadMessage.payloadBytes;\r\n\t\t\t  for (var i=0; i<messageBytes.length; i++) {\r\n\t\t\t\tif (messageBytes[i] <= 0xF)\r\n\t\t\t\t  hex = hex+\"0\"+messageBytes[i].toString(16);\r\n\t\t\t\telse \r\n\t\t\t\t  hex = hex+messageBytes[i].toString(16);\r\n\t\t\t  }\r\n\t\t\t  storedMessage.payloadMessage.payloadHex = hex;\r\n\t\t\t  \r\n\t\t\t  storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\r\n\t\t\t  storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\r\n\t\t\t  if (wireMessage.payloadMessage.duplicate) \r\n\t\t\t\t  storedMessage.payloadMessage.duplicate = true;\r\n\t\t\t  if (wireMessage.payloadMessage.retained) \r\n\t\t\t\t  storedMessage.payloadMessage.retained = true;\t   \r\n\t\t\t  \r\n\t\t\t  // Add a sequence number to sent messages.\r\n\t\t\t  if ( prefix.indexOf(\"Sent:\") == 0 ) {\r\n\t\t\t\t  if ( wireMessage.sequence === undefined )\r\n\t\t\t\t\t  wireMessage.sequence = ++this._sequence;\r\n\t\t\t\t  storedMessage.sequence = wireMessage.sequence;\r\n\t\t\t  }\r\n\t\t\t  break;    \r\n\t\t\t  \r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, storedMessage]));\r\n\t\t}\r\n\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\r\n\t};\r\n\t\r\n\tClientImpl.prototype.restore = function(key) {    \t\r\n\t\tvar value = localStorage.getItem(key);\r\n\t\tvar storedMessage = JSON.parse(value);\r\n\t\t\r\n\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\r\n\t\t\r\n\t\tswitch(storedMessage.type) {\r\n\t\t  case MESSAGE_TYPE.PUBLISH:\r\n\t\t\t  // Replace the payload message with a Message object.\r\n\t\t\t  var hex = storedMessage.payloadMessage.payloadHex;\r\n\t\t\t  var buffer = new ArrayBuffer((hex.length)/2);\r\n\t\t\t  var byteStream = new Uint8Array(buffer); \r\n\t\t\t  var i = 0;\r\n\t\t\t  while (hex.length >= 2) { \r\n\t\t\t\t  var x = parseInt(hex.substring(0, 2), 16);\r\n\t\t\t\t  hex = hex.substring(2, hex.length);\r\n\t\t\t\t  byteStream[i++] = x;\r\n\t\t\t  }\r\n\t\t\t  var payloadMessage = new Paho.MQTT.Message(byteStream);\r\n\t\t\t  \r\n\t\t\t  payloadMessage.qos = storedMessage.payloadMessage.qos;\r\n\t\t\t  payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\r\n\t\t\t  if (storedMessage.payloadMessage.duplicate) \r\n\t\t\t\t  payloadMessage.duplicate = true;\r\n\t\t\t  if (storedMessage.payloadMessage.retained) \r\n\t\t\t\t  payloadMessage.retained = true;\t \r\n\t\t\t  wireMessage.payloadMessage = payloadMessage;\r\n\t\t\t  \r\n\t\t\t  break;    \r\n\t\t\t  \r\n\t\t\tdefault:\r\n\t\t\t  throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\r\n\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\tif (key.indexOf(\"Sent:\"+this._localKey) == 0) {\r\n\t\t\twireMessage.payloadMessage.duplicate = true;\r\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;    \t\t    \r\n\t\t} else if (key.indexOf(\"Received:\"+this._localKey) == 0) {\r\n\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\r\n\t\t}\r\n\t};\r\n\t\r\n\tClientImpl.prototype._process_queue = function () {\r\n\t\tvar message = null;\r\n\t\t// Process messages in order they were added\r\n\t\tvar fifo = this._msg_queue.reverse();\r\n\r\n\t\t// Send all queued messages down socket connection\r\n\t\twhile ((message = fifo.pop())) {\r\n\t\t\tthis._socket_send(message);\r\n\t\t\t// Notify listeners that message was successfully sent\r\n\t\t\tif (this._notify_msg_sent[message]) {\r\n\t\t\t\tthis._notify_msg_sent[message]();\r\n\t\t\t\tdelete this._notify_msg_sent[message];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Expect an ACK response for this message. Add message to the set of in progress\r\n\t * messages and set an unused identifier in this message.\r\n\t * @ignore\r\n\t */\r\n\tClientImpl.prototype._requires_ack = function (wireMessage) {\r\n\t\tvar messageCount = Object.keys(this._sentMessages).length;\r\n\t\tif (messageCount > this.maxMessageIdentifier)\r\n\t\t\tthrow Error (\"Too many messages:\"+messageCount);\r\n\r\n\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\r\n\t\t\tthis._message_identifier++;\r\n\t\t}\r\n\t\twireMessage.messageIdentifier = this._message_identifier;\r\n\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\r\n\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\r\n\t\t\tthis.store(\"Sent:\", wireMessage);\r\n\t\t}\r\n\t\tif (this._message_identifier === this.maxMessageIdentifier) {\r\n\t\t\tthis._message_identifier = 1;\r\n\t\t}\r\n\t};\r\n\r\n\t/** \r\n\t * Called when the underlying websocket has been opened.\r\n\t * @ignore\r\n\t */\r\n\tClientImpl.prototype._on_socket_open = function () {      \r\n\t\t// Create the CONNECT message object.\r\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions); \r\n\t\twireMessage.clientId = this.clientId;\r\n\t\tthis._socket_send(wireMessage);\r\n\t};\r\n\r\n\t/** \r\n\t * Called when the underlying websocket has received a complete packet.\r\n\t * @ignore\r\n\t */\r\n\tClientImpl.prototype._on_socket_message = function (event) {\r\n\t\tthis._trace(\"Client._on_socket_message\", event.data);\r\n\t\t// Reset the receive ping timer, we now have evidence the server is alive.\r\n\t\tthis.receivePinger.reset();\r\n\t\tvar messages = this._deframeMessages(event.data);\r\n\t\tfor (var i = 0; i < messages.length; i+=1) {\r\n\t\t    this._handleMessage(messages[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tClientImpl.prototype._deframeMessages = function(data) {\r\n\t\tvar byteArray = new Uint8Array(data);\r\n\t    if (this.receiveBuffer) {\r\n\t        var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\r\n\t        newData.set(this.receiveBuffer);\r\n\t        newData.set(byteArray,this.receiveBuffer.length);\r\n\t        byteArray = newData;\r\n\t        delete this.receiveBuffer;\r\n\t    }\r\n\t\ttry {\r\n\t\t    var offset = 0;\r\n\t\t    var messages = [];\r\n\t\t    while(offset < byteArray.length) {\r\n\t\t        var result = decodeMessage(byteArray,offset);\r\n\t\t        var wireMessage = result[0];\r\n\t\t        offset = result[1];\r\n\t\t        if (wireMessage !== null) {\r\n\t\t            messages.push(wireMessage);\r\n\t\t        } else {\r\n\t\t            break;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    if (offset < byteArray.length) {\r\n\t\t    \tthis.receiveBuffer = byteArray.subarray(offset);\r\n\t\t    }\r\n\t\t} catch (error) {\r\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n\t\r\n\tClientImpl.prototype._handleMessage = function(wireMessage) {\r\n\t\t\r\n\t\tthis._trace(\"Client._handleMessage\", wireMessage);\r\n\r\n\t\ttry {\r\n\t\t\tswitch(wireMessage.type) {\r\n\t\t\tcase MESSAGE_TYPE.CONNACK:\r\n\t\t\t\tthis._connectTimeout.cancel();\r\n\t\t\t\t\r\n\t\t\t\t// If we have started using clean session then clear up the local state.\r\n\t\t\t\tif (this.connectOptions.cleanSession) {\r\n\t\t\t\t\tfor (var key in this._sentMessages) {\t    \t\t\r\n\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\r\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._sentMessages = {};\r\n\r\n\t\t\t\t\tfor (var key in this._receivedMessages) {\r\n\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\r\n\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._receivedMessages = {};\r\n\t\t\t\t}\r\n\t\t\t\t// Client connected and ready for business.\r\n\t\t\t\tif (wireMessage.returnCode === 0) {\r\n\t\t\t\t\tthis.connected = true;\r\n\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\r\n\t\t\t\t\tif (this.connectOptions.uris)\r\n\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Resend messages.\r\n\t\t\t\tvar sequencedMessages = new Array();\r\n\t\t\t\tfor (var msgId in this._sentMessages) {\r\n\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\r\n\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\r\n\t\t\t\t}\r\n\t\t  \r\n\t\t\t\t// Sort sentMessages into the original sent order.\r\n\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\r\n\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\r\n\t\t\t\t\tvar sentMessage = sequencedMessages[i];\r\n\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\r\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\r\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._schedule_message(sentMessage);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\r\n\t\t\t\tif (this.connectOptions.onSuccess) {\r\n\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Process all queued messages now that the connection is established. \r\n\t\t\t\tthis._process_queue();\r\n\t\t\t\tbreak;\r\n\t\t\r\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\r\n\t\t\t\tthis._receivePublish(wireMessage);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.PUBACK:\r\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\r\n\t\t\t\tif (sentMessage) {\r\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\r\n\t\t\t\t\tif (this.onMessageDelivered)\r\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.PUBREC:\r\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\r\n\t\t\t\tif (sentMessage) {\r\n\t\t\t\t\tsentMessage.pubRecReceived = true;\r\n\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\r\n\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\r\n\t\t\t\t\tthis._schedule_message(pubRelMessage);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.PUBREL:\r\n\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\r\n\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\r\n\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\r\n\t\t\t\tif (receivedMessage) {\r\n\t\t\t\t\tthis._receiveMessage(receivedMessage);\r\n\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t}\r\n\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\r\n\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\r\n\t\t\t\tthis._schedule_message(pubCompMessage);                    \r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase MESSAGE_TYPE.PUBCOMP: \r\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\r\n\t\t\t\tif (this.onMessageDelivered)\r\n\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.SUBACK:\r\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\tif (sentMessage) {\r\n\t\t\t\t\tif(sentMessage.timeOut)\r\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\r\n\t\t\t\t\t// This will need to be fixed when we add multiple topic support\r\n          \t\t\tif (wireMessage.returnCode[0] === 0x80) {\r\n\t\t\t\t\t\tif (sentMessage.onFailure) {\r\n\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t} else if (sentMessage.onSuccess) {\r\n\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.UNSUBACK:\r\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\tif (sentMessage) { \r\n\t\t\t\t\tif (sentMessage.timeOut)\r\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\r\n\t\t\t\t\tif (sentMessage.callback) {\r\n\t\t\t\t\t\tsentMessage.callback();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.PINGRESP:\r\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\r\n\t\t\t\tthis.sendPinger.reset();\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\r\n\t\t\t\t// Clients do not expect to receive disconnect packets.\r\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\t\r\n\t/** @ignore */\r\n\tClientImpl.prototype._on_socket_error = function (error) {\r\n\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\r\n\t};\r\n\r\n\t/** @ignore */\r\n\tClientImpl.prototype._on_socket_close = function () {\r\n\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\r\n\t};\r\n\r\n\t/** @ignore */\r\n\tClientImpl.prototype._socket_send = function (wireMessage) {\r\n\t\t\r\n\t\tif (wireMessage.type == 1) {\r\n\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\"); \r\n\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\r\n\t\t}\r\n\t\telse this._trace(\"Client._socket_send\", wireMessage);\r\n\t\t\r\n\t\tthis.socket.send(wireMessage.encode());\r\n\t\t/* We have proved to the server we are alive. */\r\n\t\tthis.sendPinger.reset();\r\n\t};\r\n\t\r\n\t/** @ignore */\r\n\tClientImpl.prototype._receivePublish = function (wireMessage) {\r\n\t\tswitch(wireMessage.payloadMessage.qos) {\r\n\t\t\tcase \"undefined\":\r\n\t\t\tcase 0:\r\n\t\t\t\tthis._receiveMessage(wireMessage);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\r\n\t\t\t\tthis._schedule_message(pubAckMessage);\r\n\t\t\t\tthis._receiveMessage(wireMessage);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\r\n\t\t\t\tthis.store(\"Received:\", wireMessage);\r\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\r\n\t\t\t\tthis._schedule_message(pubRecMessage);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(\"Invaild qos=\"+wireMmessage.payloadMessage.qos);\r\n\t\t};\r\n\t};\r\n\r\n\t/** @ignore */\r\n\tClientImpl.prototype._receiveMessage = function (wireMessage) {\r\n\t\tif (this.onMessageArrived) {\r\n\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Client has disconnected either at its own request or because the server\r\n\t * or network disconnected it. Remove all non-durable state.\r\n\t * @param {errorCode} [number] the error number.\r\n\t * @param {errorText} [string] the error text.\r\n\t * @ignore\r\n\t */\r\n\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\r\n\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\r\n\t\t\r\n\t\tthis.sendPinger.cancel();\r\n\t\tthis.receivePinger.cancel();\r\n\t\tif (this._connectTimeout)\r\n\t\t\tthis._connectTimeout.cancel();\r\n\t\t// Clear message buffers.\r\n\t\tthis._msg_queue = [];\r\n\t\tthis._notify_msg_sent = {};\r\n\t   \r\n\t\tif (this.socket) {\r\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\r\n\t\t\tthis.socket.onopen = null;\r\n\t\t\tthis.socket.onmessage = null;\r\n\t\t\tthis.socket.onerror = null;\r\n\t\t\tthis.socket.onclose = null;\r\n\t\t\tif (this.socket.readyState === 1)\r\n\t\t\t\tthis.socket.close();\r\n\t\t\tdelete this.socket;           \r\n\t\t}\r\n\t\t\r\n\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\r\n\t\t\t// Try the next host.\r\n\t\t\tthis.hostIndex++;\r\n\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\r\n\t\t\r\n\t\t} else {\r\n\t\t\r\n\t\t\tif (errorCode === undefined) {\r\n\t\t\t\terrorCode = ERROR.OK.code;\r\n\t\t\t\terrorText = format(ERROR.OK);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\r\n\t\t\tif (this.connected) {\r\n\t\t\t\tthis.connected = false;\r\n\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.       \r\n\t\t\t\tif (this.onConnectionLost)\r\n\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText});      \t\r\n\t\t\t} else {\r\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\r\n\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\r\n\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\")\r\n\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\r\n\t\t\t\t\tif (this.connectOptions.uris) {\r\n\t\t\t\t\t\tthis.hostIndex = 0;\r\n\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);  \r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._doConnect(this.uri);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if(this.connectOptions.onFailure) {\r\n\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/** @ignore */\r\n\tClientImpl.prototype._trace = function () {\r\n\t\t// Pass trace message back to client's callback function\r\n\t\tif (this.traceFunction) {\r\n\t\t\tfor (var i in arguments)\r\n\t\t\t{\t\r\n\t\t\t\tif (typeof arguments[i] !== \"undefined\")\r\n\t\t\t\t\targuments[i] = JSON.stringify(arguments[i]);\r\n\t\t\t}\r\n\t\t\tvar record = Array.prototype.slice.call(arguments).join(\"\");\r\n\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\r\n\t\t}\r\n\r\n\t\t//buffer style trace\r\n\t\tif ( this._traceBuffer !== null ) {  \r\n\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\r\n\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {    \r\n\t\t\t\t\tthis._traceBuffer.shift();              \r\n\t\t\t\t}\r\n\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\r\n\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\r\n\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\r\n\t\t   };\r\n\t\t};\r\n\t};\r\n\t\r\n\t/** @ignore */\r\n\tClientImpl.prototype._traceMask = function (traceObject, masked) {\r\n\t\tvar traceObjectMasked = {};\r\n\t\tfor (var attr in traceObject) {\r\n\t\t\tif (traceObject.hasOwnProperty(attr)) {\r\n\t\t\t\tif (attr == masked) \r\n\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\r\n\t\t\t\telse\r\n\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\r\n\t\t\t} \r\n\t\t}\r\n\t\treturn traceObjectMasked;\r\n\t};\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Public Programming interface.\r\n\t// ------------------------------------------------------------------------\r\n\t\r\n\t/** \r\n\t * The JavaScript application communicates to the server using a {@link Paho.MQTT.Client} object. \r\n\t * <p>\r\n\t * Most applications will create just one Client object and then call its connect() method,\r\n\t * however applications can create more than one Client object if they wish. \r\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\r\n\t * <p>\r\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods \r\n\t * (even though the underlying protocol exchange might be synchronous in nature). \r\n\t * This means they signal their completion by calling back to the application, \r\n\t * via Success or Failure callback functions provided by the application on the method in question. \r\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime \r\n\t * of the script that made the invocation.\r\n\t * <p>\r\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>, \r\n\t * that are defined on the {@link Paho.MQTT.Client} object.  \r\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client. \r\n\t *\r\n\t * @name Paho.MQTT.Client    \r\n\t * \r\n\t * @constructor\r\n\t *  \r\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\r\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\r\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\r\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\r\n\t * \r\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\r\n\t * @property {number} port - <i>read only</i> the server's port.\r\n\t * @property {string} path - <i>read only</i> the server's path.\r\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\r\n\t * @property {function} onConnectionLost - called when a connection has been lost. \r\n\t *                            after a connect() method has succeeded.\r\n\t *                            Establish the call back used when a connection has been lost. The connection may be\r\n\t *                            lost because the client initiates a disconnect or because the server or network \r\n\t *                            cause the client to be disconnected. The disconnect call back may be called without \r\n\t *                            the connectionComplete call back being invoked if, for example the client fails to \r\n\t *                            connect.\r\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\r\n\t *                            <ol>   \r\n\t *                            <li>errorCode\r\n\t *                            <li>errorMessage       \r\n\t *                            </ol>\r\n\t * @property {function} onMessageDelivered called when a message has been delivered. \r\n\t *                            All processing that this Client will ever do has been completed. So, for example,\r\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\r\n\t *                            and the message has been removed from persistent storage before this callback is invoked. \r\n\t *                            Parameters passed to the onMessageDelivered callback are:\r\n\t *                            <ol>   \r\n\t *                            <li>{@link Paho.MQTT.Message} that was delivered.\r\n\t *                            </ol>    \r\n\t * @property {function} onMessageArrived called when a message has arrived in this Paho.MQTT.client. \r\n\t *                            Parameters passed to the onMessageArrived callback are:\r\n\t *                            <ol>   \r\n\t *                            <li>{@link Paho.MQTT.Message} that has arrived.\r\n\t *                            </ol>    \r\n\t */\r\n\tvar Client = function (host, port, path, clientId) {\r\n\t    \r\n\t    var uri;\r\n\t    \r\n\t\tif (typeof host !== \"string\")\r\n\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\r\n\t    \r\n\t    if (arguments.length == 2) {\r\n\t        // host: must be full ws:// uri\r\n\t        // port: clientId\r\n\t        clientId = port;\r\n\t        uri = host;\r\n\t        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\r\n\t        if (match) {\r\n\t            host = match[4]||match[2];\r\n\t            port = parseInt(match[7]);\r\n\t            path = match[8];\r\n\t        } else {\r\n\t            throw new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\r\n\t        }\r\n\t    } else {\r\n\t        if (arguments.length == 3) {\r\n\t\t\t\tclientId = path;\r\n\t\t\t\tpath = \"/mqtt\";\r\n\t\t\t}\r\n\t\t\tif (typeof port !== \"number\" || port < 0)\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\r\n\t\t\tif (typeof path !== \"string\")\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\r\n\t\t\t\r\n\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") != -1 && host.slice(0,1) != \"[\" && host.slice(-1) != \"]\");\r\n\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\r\n\t\t}\r\n\r\n\t\tvar clientIdLength = 0;\r\n\t\tfor (var i = 0; i<clientId.length; i++) {\r\n\t\t\tvar charCode = clientId.charCodeAt(i);                   \r\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {    \t\t\t\r\n\t\t\t\t i++; // Surrogate pair.\r\n\t\t\t}   \t\t   \r\n\t\t\tclientIdLength++;\r\n\t\t}     \t   \t\r\n\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\r\n\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"])); \r\n\t\t\r\n\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\r\n\t\tthis._getHost =  function() { return host; };\r\n\t\tthis._setHost = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\r\n\t\t\t\r\n\t\tthis._getPort = function() { return port; };\r\n\t\tthis._setPort = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\r\n\r\n\t\tthis._getPath = function() { return path; };\r\n\t\tthis._setPath = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\r\n\r\n\t\tthis._getURI = function() { return uri; };\r\n\t\tthis._setURI = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\r\n\t\t\r\n\t\tthis._getClientId = function() { return client.clientId; };\r\n\t\tthis._setClientId = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\r\n\t\t\r\n\t\tthis._getOnConnectionLost = function() { return client.onConnectionLost; };\r\n\t\tthis._setOnConnectionLost = function(newOnConnectionLost) { \r\n\t\t\tif (typeof newOnConnectionLost === \"function\")\r\n\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\r\n\t\t};\r\n\r\n\t\tthis._getOnMessageDelivered = function() { return client.onMessageDelivered; };\r\n\t\tthis._setOnMessageDelivered = function(newOnMessageDelivered) { \r\n\t\t\tif (typeof newOnMessageDelivered === \"function\")\r\n\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\r\n\t\t};\r\n\t   \r\n\t\tthis._getOnMessageArrived = function() { return client.onMessageArrived; };\r\n\t\tthis._setOnMessageArrived = function(newOnMessageArrived) { \r\n\t\t\tif (typeof newOnMessageArrived === \"function\")\r\n\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\r\n\t\t};\r\n\r\n\t\tthis._getTrace = function() { return client.traceFunction; };\r\n\t\tthis._setTrace = function(trace) {\r\n\t\t\tif(typeof trace === \"function\"){\r\n\t\t\t\tclient.traceFunction = trace;\r\n\t\t\t}else{\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/** \r\n\t\t * Connect this Messaging client to its server. \r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#connect\r\n\t\t * @function\r\n\t\t * @param {Object} connectOptions - attributes used with the connection. \r\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this \r\n\t\t *                    number of seconds, it is deemed to have failed.\r\n\t\t *                    The default is 30 seconds.\r\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\r\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\r\n\t\t * @param {Paho.MQTT.Message} connectOptions.willMessage - sent by the server when the client\r\n\t\t *                    disconnects abnormally.\r\n\t\t * @param {Number} connectOptions.keepAliveInterval - the server disconnects this client if\r\n\t\t *                    there is no activity for this number of seconds.\r\n\t\t *                    The default value of 60 seconds is assumed if not set.\r\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server \r\n\t\t *                    persistent state is deleted on successful connect.\r\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\r\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\r\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement \r\n\t\t *                    has been received from the server.\r\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\r\n\t\t * <ol>\r\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.       \r\n\t\t * </ol>\r\n\t\t * @config {function} [onFailure] called when the connect request has failed or timed out.\r\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\r\n\t\t * <ol>\r\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.       \r\n\t\t * <li>errorCode a number indicating the nature of the error.\r\n\t\t * <li>errorMessage text describing the error.      \r\n\t\t * </ol>\r\n\t\t * @config {Array} [hosts] If present this contains either a set of hostnames or fully qualified\r\n\t\t * WebSocket URIs (ws://example.com:1883/mqtt), that are tried in order in place \r\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\r\n\t\t * one of then succeeds.\r\n\t\t * @config {Array} [ports] If present the set of ports matching the hosts. If hosts contains URIs, this property\r\n\t\t * is not used.\r\n\t\t * @throws {InvalidState} if the client is not in disconnected state. The client must have received connectionLost\r\n\t\t * or disconnected before calling connect for a second or subsequent time.\r\n\t\t */\r\n\t\tthis.connect = function (connectOptions) {\r\n\t\t\tconnectOptions = connectOptions || {} ;\r\n\t\t\tvalidate(connectOptions,  {timeout:\"number\",\r\n\t\t\t\t\t\t\t\t\t   userName:\"string\", \r\n\t\t\t\t\t\t\t\t\t   password:\"string\", \r\n\t\t\t\t\t\t\t\t\t   willMessage:\"object\", \r\n\t\t\t\t\t\t\t\t\t   keepAliveInterval:\"number\", \r\n\t\t\t\t\t\t\t\t\t   cleanSession:\"boolean\", \r\n\t\t\t\t\t\t\t\t\t   useSSL:\"boolean\",\r\n\t\t\t\t\t\t\t\t\t   invocationContext:\"object\", \r\n\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \r\n\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\r\n\t\t\t\t\t\t\t\t\t   hosts:\"object\",\r\n\t\t\t\t\t\t\t\t\t   ports:\"object\",\r\n\t\t\t\t\t\t\t\t\t   mqttVersion:\"number\"});\r\n\t\t\t\r\n\t\t\t// If no keep alive interval is set, assume 60 seconds.\r\n\t\t\tif (connectOptions.keepAliveInterval === undefined)\r\n\t\t\t\tconnectOptions.keepAliveInterval = 60;\r\n\r\n\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\r\n\t\t\t}\r\n\r\n\t\t\tif (connectOptions.mqttVersion === undefined) {\r\n\t\t\t\tconnectOptions.mqttVersionExplicit = false;\r\n\t\t\t\tconnectOptions.mqttVersion = 4;\r\n\t\t\t} else {\r\n\t\t\t\tconnectOptions.mqttVersionExplicit = true;\r\n\t\t\t}\r\n\r\n\t\t\t//Check that if password is set, so is username\r\n\t\t\tif (connectOptions.password === undefined && connectOptions.userName !== undefined)\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]))\r\n\r\n\t\t\tif (connectOptions.willMessage) {\r\n\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\r\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\r\n\t\t\t\t// The will message must have a payload that can be represented as a string.\r\n\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\r\n\t\t\t\tconnectOptions.willMessage.stringPayload;\r\n\t\t\t\t\r\n\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\r\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\r\n\t\t\t}\r\n\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\r\n\t\t\t\tconnectOptions.cleanSession = true;\r\n\t\t\tif (connectOptions.hosts) {\r\n\t\t\t    \r\n\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\r\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\r\n\t\t\t\tif (connectOptions.hosts.length <1 )\r\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\r\n\t\t\t\t\r\n\t\t\t\tvar usingURIs = false;\r\n\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\r\n\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\r\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\r\n\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\r\n\t\t\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t\t\tusingURIs = true;\r\n\t\t\t\t\t\t} else if (!usingURIs) {\r\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (usingURIs) {\r\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!usingURIs) {\r\n\t\t\t\t\tif (!connectOptions.ports)\r\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\r\n\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\r\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\r\n\t\t\t\t\tif (connectOptions.hosts.length != connectOptions.ports.length)\r\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\r\n\t\t\t\t\t\r\n\t\t\t\t\tconnectOptions.uris = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\r\n\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\r\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\r\n\t\t\t\t\t\tvar host = connectOptions.hosts[i];\r\n\t\t\t\t\t\tvar port = connectOptions.ports[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\r\n\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\r\n\t\t\t\t\t\tconnectOptions.uris.push(uri);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tclient.connect(connectOptions);\r\n\t\t};\r\n\t \r\n\t\t/** \r\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#subscribe\r\n\t\t * @function\r\n\t\t * @param {string} filter describing the destinations to receive messages from.\r\n\t\t * <br>\r\n\t\t * @param {object} subscribeOptions - used to control the subscription\r\n\t\t *\r\n\t\t * @param {number} subscribeOptions.qos - the maiximum qos of any publications sent \r\n\t\t *                                  as a result of making this subscription.\r\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback \r\n\t\t *                                  or onFailure callback.\r\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\r\n\t\t *                                  has been received from the server.\r\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\r\n\t\t *                                  <ol>\r\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.       \r\n\t\t *                                  </ol>\r\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\r\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\r\n\t\t *                                  <ol>\r\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.       \r\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\r\n\t\t *                                  <li>errorMessage - text describing the error.      \r\n\t\t *                                  </ol>\r\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\r\n\t\t *                                  seconds after which the onFailure calback is called.\r\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\r\n\t\t *                                  callback from being called when the subscribe completes.         \r\n\t\t * @throws {InvalidState} if the client is not in connected state.\r\n\t\t */\r\n\t\tthis.subscribe = function (filter, subscribeOptions) {\r\n\t\t\tif (typeof filter !== \"string\")\r\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\r\n\t\t\tsubscribeOptions = subscribeOptions || {} ;\r\n\t\t\tvalidate(subscribeOptions,  {qos:\"number\", \r\n\t\t\t\t\t\t\t\t\t\t invocationContext:\"object\", \r\n\t\t\t\t\t\t\t\t\t\t onSuccess:\"function\", \r\n\t\t\t\t\t\t\t\t\t\t onFailure:\"function\",\r\n\t\t\t\t\t\t\t\t\t\t timeout:\"number\"\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\r\n\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\r\n\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" \r\n\t\t\t\t&& !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\r\n\t\t\tclient.subscribe(filter, subscribeOptions);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#unsubscribe\r\n\t\t * @function\r\n\t\t * @param {string} filter - describing the destinations to receive messages from.\r\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\r\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback \r\n\t\t                                      or onFailure callback.\r\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\r\n\t\t *                                    A single response object parameter is passed to the \r\n\t\t *                                    onSuccess callback containing the following fields:\r\n\t\t *                                    <ol>\r\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.     \r\n\t\t *                                    </ol>\r\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\r\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\r\n\t\t *                                    <ol>\r\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.       \r\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\r\n\t\t *                                    <li>errorMessage - text describing the error.      \r\n\t\t *                                    </ol>\r\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\r\n\t\t *                                    after which the onFailure callback is called. The presence of\r\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\r\n\t\t *                                    called when the unsubscribe completes\r\n\t\t * @throws {InvalidState} if the client is not in connected state.\r\n\t\t */\r\n\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\r\n\t\t\tif (typeof filter !== \"string\")\r\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\r\n\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\r\n\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\", \r\n\t\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \r\n\t\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\r\n\t\t\t\t\t\t\t\t\t\t   timeout:\"number\"\r\n\t\t\t\t\t\t\t\t\t\t  });\r\n\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\r\n\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\r\n\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Send a message to the consumers of the destination in the Message.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#send\r\n\t\t * @function \r\n\t\t * @param {string|Paho.MQTT.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent. \r\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.MQTT.Message object.\r\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent. \r\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\r\n\t\t * \t\t<dl>\r\n\t\t * \t\t\t<dt>0 Best effort (default).\r\n\t\t *     \t\t\t<dt>1 At least once.\r\n\t\t *     \t\t\t<dt>2 Exactly once.     \r\n\t\t * \t\t</dl>\r\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered \r\n\t\t *                     to both current and future subscriptions.\r\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \r\n\t\t *                     A received message has the retained boolean set to true if the message was published \r\n\t\t *                     with the retained boolean set to true\r\n\t\t *                     and the subscrption was made after the message has been published. \r\n\t\t * @throws {InvalidState} if the client is not connected.\r\n\t\t */   \r\n\t\tthis.send = function (topic,payload,qos,retained) {   \r\n\t\t\tvar message ;  \r\n\t\t\t\r\n\t\t\tif(arguments.length == 0){\r\n\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\r\n\r\n\t\t\t}else if(arguments.length == 1) {\r\n\r\n\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\r\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\r\n\r\n\t\t\t\tmessage = topic;\r\n\t\t\t\tif (typeof message.destinationName === \"undefined\")\r\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\r\n\t\t\t\tclient.send(message); \r\n\r\n\t\t\t}else {\r\n\t\t\t\t//parameter checking in Message object \r\n\t\t\t\tmessage = new Message(payload);\r\n\t\t\t\tmessage.destinationName = topic;\r\n\t\t\t\tif(arguments.length >= 3)\r\n\t\t\t\t\tmessage.qos = qos;\r\n\t\t\t\tif(arguments.length >= 4)\r\n\t\t\t\t\tmessage.retained = retained;\r\n\t\t\t\tclient.send(message); \r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/** \r\n\t\t * Normal disconnect of this Messaging client from its server.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#disconnect\r\n\t\t * @function\r\n\t\t * @throws {InvalidState} if the client is already disconnected.     \r\n\t\t */\r\n\t\tthis.disconnect = function () {\r\n\t\t\tclient.disconnect();\r\n\t\t};\r\n\t\t\r\n\t\t/** \r\n\t\t * Get the contents of the trace log.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#getTraceLog\r\n\t\t * @function\r\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\r\n\t\t */\r\n\t\tthis.getTraceLog = function () {\r\n\t\t\treturn client.getTraceLog();\r\n\t\t}\r\n\t\t\r\n\t\t/** \r\n\t\t * Start tracing.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#startTrace\r\n\t\t * @function\r\n\t\t */\r\n\t\tthis.startTrace = function () {\r\n\t\t\tclient.startTrace();\r\n\t\t};\r\n\t\t\r\n\t\t/** \r\n\t\t * Stop tracing.\r\n\t\t * \r\n\t\t * @name Paho.MQTT.Client#stopTrace\r\n\t\t * @function\r\n\t\t */\r\n\t\tthis.stopTrace = function () {\r\n\t\t\tclient.stopTrace();\r\n\t\t};\r\n\r\n\t\tthis.isConnected = function() {\r\n\t\t\treturn client.connected;\r\n\t\t};\r\n\t};\r\n\r\n\tClient.prototype = {\r\n\t\tget host() { return this._getHost(); },\r\n\t\tset host(newHost) { this._setHost(newHost); },\r\n\t\t\t\r\n\t\tget port() { return this._getPort(); },\r\n\t\tset port(newPort) { this._setPort(newPort); },\r\n\r\n\t\tget path() { return this._getPath(); },\r\n\t\tset path(newPath) { this._setPath(newPath); },\r\n\t\t\t\r\n\t\tget clientId() { return this._getClientId(); },\r\n\t\tset clientId(newClientId) { this._setClientId(newClientId); },\r\n\r\n\t\tget onConnectionLost() { return this._getOnConnectionLost(); },\r\n\t\tset onConnectionLost(newOnConnectionLost) { this._setOnConnectionLost(newOnConnectionLost); },\r\n\r\n\t\tget onMessageDelivered() { return this._getOnMessageDelivered(); },\r\n\t\tset onMessageDelivered(newOnMessageDelivered) { this._setOnMessageDelivered(newOnMessageDelivered); },\r\n\t\t\r\n\t\tget onMessageArrived() { return this._getOnMessageArrived(); },\r\n\t\tset onMessageArrived(newOnMessageArrived) { this._setOnMessageArrived(newOnMessageArrived); },\r\n\r\n\t\tget trace() { return this._getTrace(); },\r\n\t\tset trace(newTraceFunction) { this._setTrace(newTraceFunction); }\t\r\n\r\n\t};\r\n\t\r\n\t/** \r\n\t * An application message, sent or received.\r\n\t * <p>\r\n\t * All attributes may be null, which implies the default values.\r\n\t * \r\n\t * @name Paho.MQTT.Message\r\n\t * @constructor\r\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\r\n\t * <p>\r\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\r\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\r\n\t * <p>\r\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\r\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\r\n\t *                    (for messages received by the onMessage function).\r\n\t * <p>\r\n\t * @property {number} qos The Quality of Service used to deliver the message.\r\n\t * <dl>\r\n\t *     <dt>0 Best effort (default).\r\n\t *     <dt>1 At least once.\r\n\t *     <dt>2 Exactly once.     \r\n\t * </dl>\r\n\t * <p>\r\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered \r\n\t *                     to both current and future subscriptions.\r\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \r\n\t *                     A received message has the retained boolean set to true if the message was published \r\n\t *                     with the retained boolean set to true\r\n\t *                     and the subscrption was made after the message has been published. \r\n\t * <p>\r\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received. \r\n\t *                     This is only set on messages received from the server.\r\n\t *                     \r\n\t */\r\n\tvar Message = function (newPayload) {  \r\n\t\tvar payload;\r\n\t\tif (   typeof newPayload === \"string\" \r\n\t\t\t|| newPayload instanceof ArrayBuffer\r\n\t\t\t|| newPayload instanceof Int8Array\r\n\t\t\t|| newPayload instanceof Uint8Array\r\n\t\t\t|| newPayload instanceof Int16Array\r\n\t\t\t|| newPayload instanceof Uint16Array\r\n\t\t\t|| newPayload instanceof Int32Array\r\n\t\t\t|| newPayload instanceof Uint32Array\r\n\t\t\t|| newPayload instanceof Float32Array\r\n\t\t\t|| newPayload instanceof Float64Array\r\n\t\t   ) {\r\n\t\t\tpayload = newPayload;\r\n\t\t} else {\r\n\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\r\n\t\t}\r\n\r\n\t\tthis._getPayloadString = function () {\r\n\t\t\tif (typeof payload === \"string\")\r\n\t\t\t\treturn payload;\r\n\t\t\telse\r\n\t\t\t\treturn parseUTF8(payload, 0, payload.length); \r\n\t\t};\r\n\r\n\t\tthis._getPayloadBytes = function() {\r\n\t\t\tif (typeof payload === \"string\") {\r\n\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\r\n\t\t\t\tvar byteStream = new Uint8Array(buffer); \r\n\t\t\t\tstringToUTF8(payload, byteStream, 0);\r\n\r\n\t\t\t\treturn byteStream;\r\n\t\t\t} else {\r\n\t\t\t\treturn payload;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar destinationName = undefined;\r\n\t\tthis._getDestinationName = function() { return destinationName; };\r\n\t\tthis._setDestinationName = function(newDestinationName) { \r\n\t\t\tif (typeof newDestinationName === \"string\")\r\n\t\t\t\tdestinationName = newDestinationName;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\r\n\t\t};\r\n\t\t\t\t\r\n\t\tvar qos = 0;\r\n\t\tthis._getQos = function() { return qos; };\r\n\t\tthis._setQos = function(newQos) { \r\n\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\r\n\t\t\t\tqos = newQos;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\r\n\t\t};\r\n\r\n\t\tvar retained = false;\r\n\t\tthis._getRetained = function() { return retained; };\r\n\t\tthis._setRetained = function(newRetained) { \r\n\t\t\tif (typeof newRetained === \"boolean\")\r\n\t\t\t\tretained = newRetained;\r\n\t\t\telse \r\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\r\n\t\t};\r\n\t\t\r\n\t\tvar duplicate = false;\r\n\t\tthis._getDuplicate = function() { return duplicate; };\r\n\t\tthis._setDuplicate = function(newDuplicate) { duplicate = newDuplicate; };\r\n\t};\r\n\t\r\n\tMessage.prototype = {\r\n\t\tget payloadString() { return this._getPayloadString(); },\r\n\t\tget payloadBytes() { return this._getPayloadBytes(); },\r\n\t\t\r\n\t\tget destinationName() { return this._getDestinationName(); },\r\n\t\tset destinationName(newDestinationName) { this._setDestinationName(newDestinationName); },\r\n\t\t\r\n\t\tget qos() { return this._getQos(); },\r\n\t\tset qos(newQos) { this._setQos(newQos); },\r\n\r\n\t\tget retained() { return this._getRetained(); },\r\n\t\tset retained(newRetained) { this._setRetained(newRetained); },\r\n\r\n\t\tget duplicate() { return this._getDuplicate(); },\r\n\t\tset duplicate(newDuplicate) { this._setDuplicate(newDuplicate); }\r\n\t};\r\n\t   \r\n\t// Module contents.\r\n\treturn {\r\n\t\tClient: Client,\r\n\t\tMessage: Message\r\n\t};\r\n})(window);\r\nexports.Paho = Paho;","export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"tertiary\\\">\\r\\n    <ion-button slot=\\\"start\\\" (click)=\\\"closeControl()\\\">\\r\\n      <ion-icon name=\\\"close\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n    <ion-title>Control</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content padding>\\r\\n  <div id=\\\"container\\\">\\r\\n    <!--<ion-fab-button *ngIf=\\\"encendido\\\" color=\\\"primary\\\">\\r\\n      <ion-icon name=\\\"bulb\\\"></ion-icon>\\r\\n    </ion-fab-button>\\r\\n    <ion-fab-button *ngIf=\\\"!encendido\\\" color=\\\"favorite\\\">\\r\\n      <ion-icon name=\\\"bulb\\\"></ion-icon>\\r\\n    </ion-fab-button>-->\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-img [src]=\\\"imgBtn\\\" style=\\\"align-items: center\\\"></ion-img>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-button (click)=\\\"changeStatus()\\\" shape=\\\"round\\\" [color]=\\\"colorBtn\\\" style=\\\"color:black\\\">{{textBtn}}</ion-button>\\r\\n          <!--<h3>Bit Inicio: {{inicio}}</h3>\\r\\n          <h3>Bit Paridad: {{paridad}}</h3>\\r\\n          <h3>Bit Estado: {{estado}}</h3>\\r\\n          <h3>Bit Encendido Lampara: {{encendido}}</h3>\\r\\n          <h3>Bit Confirmacion: {{confirmacion}}</h3>\\r\\n          <h3>Bit Cierre: {{cierre}}</h3>-->\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </div>\\r\\n</ion-content>\";","export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"tertiary\\\">\\r\\n    <ion-button slot=\\\"start\\\" (click)=\\\"closeMonitor()\\\">\\r\\n      <ion-icon name=\\\"close\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n    <ion-title>Monitor</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n  <!--\\r\\n  <ion-item>\\r\\n    <ion-label>Temperatura: {{temp}}</ion-label>\\r\\n  </ion-item>-->\\r\\n  <ion-item>\\r\\n    <ion-label>Temperatura Variable: {{varTemp}}</ion-label>\\r\\n  </ion-item>\\r\\n  <div style=\\\"display:block;\\\">\\r\\n    <canvas baseChart \\r\\n        [datasets]=\\\"lineChartData\\\" \\r\\n        [labels]=\\\"lineChartLabels\\\" \\r\\n        [options]=\\\"lineChartOptions\\\"\\r\\n        [colors]=\\\"lineChartColors\\\" \\r\\n        [legend]=\\\"lineChartLegend\\\" \\r\\n        [chartType]=\\\"lineChartType\\\" \\r\\n        [plugins]=\\\"lineChartPlugins\\\">\\r\\n    </canvas>\\r\\n  </div>\\r\\n</ion-content>\";","export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"tertiary\\\">\\r\\n    <ion-button slot=\\\"start\\\" (click)=\\\"closeSetting()\\\">\\r\\n      <ion-icon name=\\\"close\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n    <ion-title>Configuración</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n  <div id=\\\"container\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label>Estilo: {{color}}</ion-label>\\r\\n            <ion-select placeholder=\\\"Seleccionar estilo\\\">\\r\\n              <ion-select-option value=\\\"0\\\">Dark</ion-select-option>\\r\\n              <ion-select-option value=\\\"1\\\">Light</ion-select-option>\\r\\n            </ion-select>\\r\\n          </ion-item>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <iframe src=\\\"https://shiftr.io/sergtello/PetCan/embed?zoom=1\\\" width=\\\"300\\\" \\r\\n            height=\\\"200\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen>\\r\\n          </iframe>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </div>\\r\\n</ion-content>\";","export default \"<ion-content [fullscreen]=\\\"true\\\">\\r\\n  <div id=\\\"container\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <strong>{{name}}'s Home</strong>\\r\\n          <ion-toolbar>\\r\\n            <ion-title size=\\\"small\\\">Puedes seleccionar una de las opciones</ion-title>\\r\\n          </ion-toolbar>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <ion-row center>\\r\\n        <ion-col>\\r\\n          <ion-fab-button color=\\\"primary\\\" (click)=\\\"openControl()\\\">\\r\\n            <ion-icon name=\\\"bulb\\\"></ion-icon>\\r\\n          </ion-fab-button>\\r\\n        </ion-col>\\r\\n        <ion-col>\\r\\n          <ion-fab-button color=\\\"medium\\\" (click)=\\\"openMonitor()\\\">\\r\\n            <ion-icon name=\\\"pulse\\\"></ion-icon>\\r\\n          </ion-fab-button>\\r\\n        </ion-col>\\r\\n        <ion-col>\\r\\n          <ion-fab-button color=\\\"favorite\\\" (click)=\\\"openSetting()\\\">\\r\\n            <ion-icon name=\\\"construct\\\"></ion-icon>\\r\\n          </ion-fab-button>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <br><br><br><br><br>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <p>Ionic/MQTT</p>\\r\\n          <p>\\r\\n            <a href=\\\"https://github.com/Johguxo/IoTSmartHouse\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Para más información del proyecto</a>\\r\\n          </p>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </div>\\r\\n</ion-content>\\r\\n<ion-footer>\\r\\n  <div>\\r\\n  <ion-grid>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <ion-button style=\\\"display: grid;\\\" color=\\\"dark\\\" (click)=\\\"OnLogOut()\\\">Cerrar Sesion</ion-button>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n  </div>\\r\\n</ion-footer>\";","export default \"#container {\\n  text-align: center;\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n#container strong {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n#container p {\\n  font-size: 16px;\\n  line-height: 22px;\\n  color: #8c8c8c;\\n  margin: 0;\\n}\\n\\n#container a {\\n  text-decoration: none;\\n}\\n\\nion-fab-button {\\n  display: inline-flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50c0lvVC9jb250cm9sL0M6XFxVc2Vyc1xcc2VyZ2lcXERlc2t0b3BcXDggU0VNRVNUUkVcXERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIE1vYmlsZXNcXElPVF9NT0JJTEVfTE9TUFJPUy9zcmNcXGFwcFxcY29tcG9uZW50c0lvVFxcY29udHJvbFxcY29udHJvbC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvY29tcG9uZW50c0lvVC9jb250cm9sL2NvbnRyb2wuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxRQUFBO0VBQ0EsMkJBQUE7QUNDSjs7QURFRTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQ0NKOztBREVFO0VBQ0UsZUFBQTtFQUNBLGlCQUFBO0VBRUEsY0FBQTtFQUVBLFNBQUE7QUNESjs7QURJRTtFQUNFLHFCQUFBO0FDREo7O0FER0U7RUFDRSxvQkFBQTtFQUNBLHVCQUFBO0FDQUoiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzSW9UL2NvbnRyb2wvY29udHJvbC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgfVxyXG4gIFxyXG4gICNjb250YWluZXIgc3Ryb25nIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNnB4O1xyXG4gIH1cclxuICBcclxuICAjY29udGFpbmVyIHAge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XHJcbiAgXHJcbiAgICBjb2xvcjogIzhjOGM4YztcclxuICBcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcbiAgXHJcbiAgI2NvbnRhaW5lciBhIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcbiAgaW9uLWZhYi1idXR0b257XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIH0iLCIjY29udGFpbmVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cbiNjb250YWluZXIgcCB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIycHg7XG4gIGNvbG9yOiAjOGM4YzhjO1xuICBtYXJnaW46IDA7XG59XG5cbiNjb250YWluZXIgYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuaW9uLWZhYi1idXR0b24ge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { NavParams } from '@ionic/angular';\r\nimport { ModalController } from '@ionic/angular';\r\nimport {Paho} from 'ng2-mqtt/mqttws31';\r\nimport { IotService } from '../../services/iot.service'\r\n@Component({\r\n  selector: 'app-control',\r\n  templateUrl: './control.component.html',\r\n  styleUrls: ['./control.component.scss'],\r\n})\r\nexport class ControlComponent implements OnInit {\r\n  public inicio: boolean = false;\r\n  public paridad: boolean = false;\r\n  public estado: Number = 0;\r\n  public encendido: boolean = false;\r\n  public confirmacion: boolean = false;\r\n  public cierre: boolean = false;\r\n  public nivel: number;\r\n  public textBtn:string=\"Apagado\";\r\n  public colorBtn:string=\"primary\";\r\n  public imgBtn:string=\"assets/images/foco_apagado.jpg\";\r\n  public Istatus:any;\r\n  public ICstatus:any;\r\n  public resP:any;\r\n  public resP2:any;\r\n  private client;\r\n  public userID:string;\r\n  mqttbroker = 'broker.shiftr.io';\r\n\r\n  constructor(\r\n    private toast:IotService,\r\n    private navparams: NavParams,\r\n    private modal:ModalController) {}\r\n\r\n  changeProp(newState:Number){\r\n    if(newState == 1){\r\n      this.textBtn = \"Prendido\";\r\n      this.imgBtn = \"assets/images/foco_prendido.jpg\"\r\n      this.colorBtn = 'rank'\r\n    }\r\n    else{\r\n      this.textBtn = \"Apagado\";\r\n      this.imgBtn = \"assets/images/foco_apagado.jpg\"\r\n      this.colorBtn = 'primary'\r\n    }\r\n  }\r\n  changeStatus() {\r\n    if(this.estado==1){\r\n      this.sendMessage(\"0\");\r\n    }\r\n    else{\r\n      this.sendMessage(\"1\")\r\n    }\r\n  }\r\n  ngOnInit() {\r\n    this.userID = this.navparams.get(\"uid\");\r\n    this.client = new Paho.MQTT.Client(this.mqttbroker, Number(80), this.userID);\r\n    this.onMessage();\r\n    this.client.onConnectionLost = this.onConnectionLost.bind(this);\r\n    this.client.connect({\r\n      onSuccess: this.onConnect.bind(this),\r\n      userName: 'android_client',\r\n      password:'123456',\r\n      keepAliveInterval:60\r\n    });\r\n  }\r\n  closeControl(){\r\n    this.modal.dismiss();\r\n  }\r\n  sendMessage(message: string) {\r\n    console.log(\"Mandar:\",message)\r\n    let packet = new Paho.MQTT.Message(message);\r\n    packet.destinationName = \"outState\";\r\n    packet.qos = 1;\r\n    this.client.send(packet);\r\n  }\r\n  onConnect() {\r\n    console.log('Conectado...');\r\n    this.sendMessage(\"2\")\r\n    this.client.subscribe('inState');\r\n  }\r\n  onConnectionLost(responseObject) {\r\n    this.client.onConnectionLost = (responseObject: Object) => {\r\n    this.toast.warning('Foquito is now offline')\r\n    };\r\n  }\r\n  onMessage() {\r\n    this.client.onMessageArrived = (message: Paho.MQTT.Message) => {\r\n      console.log('Recibe : ' + message.payloadString);\r\n      message.destinationName.indexOf('inState')\r\n      this.estado = Number(message.payloadString);\r\n      this.changeProp(this.estado);\r\n    };\r\n  }\r\n  \r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHNJb1QvbW9uaXRvci9tb25pdG9yLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { NavParams, ToastController } from '@ionic/angular';\r\nimport { ModalController } from '@ionic/angular';\r\nimport {Paho} from 'ng2-mqtt/mqttws31';\r\nimport { IotService } from '../../services/iot.service'\r\nimport { ChartDataSets, ChartOptions } from 'chart.js';\r\nimport { Color, Label } from 'ng2-charts';\r\n\r\n@Component({\r\n  selector: 'app-monitor',\r\n  templateUrl: './monitor.component.html',\r\n  styleUrls: ['./monitor.component.scss'],\r\n})\r\nexport class MonitorComponent implements OnInit {\r\n  public lineChartData: ChartDataSets[] = [\r\n    { data: [], label: 'Temperatura' },\r\n  ];\r\n  public lineChartLabels: Label[] = [];\r\n  public lineChartOptions: ChartOptions = {\r\n      responsive: true,\r\n      scales: {\r\n          xAxes: [{\r\n              display: false\r\n          }]\r\n      }\r\n  };\r\n  lineChartLegend = true;\r\n  lineChartPlugins = [];\r\n  lineChartType = 'line';\r\n  public temp: number;\r\n  public varTemp: number;\r\n  private client;\r\n  public userID : string;\r\n  mqttbroker = 'broker.shiftr.io';\r\n  constructor(\r\n    private toast:IotService,\r\n    private navparams: NavParams,\r\n    private modal:ModalController,\r\n  ){}\r\n\r\n  ngOnInit() {\r\n    this.temp = this.navparams.get(\"temp\");\r\n    this.userID = this.navparams.get(\"uid\");\r\n    this.client = new Paho.MQTT.Client(this.mqttbroker, Number(80), this.userID);\r\n    //this.client.onMessageArrived = this.onMessageArrived.bind(this);\r\n    this.onMessage();\r\n    this.client.onConnectionLost = this.onConnectionLost.bind(this);\r\n    this.client.connect({\r\n      onSuccess: this.onConnect.bind(this),\r\n      userName: 'android_client',\r\n      password:'123456',\r\n      keepAliveInterval:60\r\n    });\r\n    this.generateChart();\r\n  }\r\n  onConnect() {\r\n    console.log('Conectado...');\r\n    this.client.subscribe('inMonitor');\r\n  }\r\n  onConnectionLost(responseObject) {\r\n    this.client.onConnectionLost = (responseObject: Object) => {\r\n    // console.log('Connection lost : ' + JSON.stringify(responseObject));\r\n    this.toast.warning('Monitor is now offline')\r\n    };\r\n  }\r\n  onMessage() {\r\n    this.client.onMessageArrived = (message: Paho.MQTT.Message) => {\r\n      console.log('Temperatura : ' + message.payloadString);\r\n      message.destinationName.indexOf('inMonitor')\r\n      this.varTemp = Number(message.payloadString);\r\n    };\r\n  }\r\n\r\n  closeMonitor(){\r\n    this.modal.dismiss();\r\n  }\r\n  generateChart(){\r\n  }\r\n}\r\n","export default \"#container {\\n  text-align: center;\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n#container strong {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n#container p {\\n  font-size: 16px;\\n  line-height: 22px;\\n  color: #8c8c8c;\\n  margin: 0;\\n}\\n\\n#container a {\\n  text-decoration: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50c0lvVC9zZXR0aW5nL0M6XFxVc2Vyc1xcc2VyZ2lcXERlc2t0b3BcXDggU0VNRVNUUkVcXERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIE1vYmlsZXNcXElPVF9NT0JJTEVfTE9TUFJPUy9zcmNcXGFwcFxcY29tcG9uZW50c0lvVFxcc2V0dGluZ1xcc2V0dGluZy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvY29tcG9uZW50c0lvVC9zZXR0aW5nL3NldHRpbmcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxRQUFBO0VBQ0EsMkJBQUE7QUNDSjs7QURFRTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQ0NKOztBREVFO0VBQ0UsZUFBQTtFQUNBLGlCQUFBO0VBRUEsY0FBQTtFQUVBLFNBQUE7QUNESjs7QURJRTtFQUNFLHFCQUFBO0FDREoiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzSW9UL3NldHRpbmcvc2V0dGluZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgfVxyXG4gIFxyXG4gICNjb250YWluZXIgc3Ryb25nIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNnB4O1xyXG4gIH1cclxuICBcclxuICAjY29udGFpbmVyIHAge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XHJcbiAgXHJcbiAgICBjb2xvcjogIzhjOGM4YztcclxuICBcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcbiAgXHJcbiAgI2NvbnRhaW5lciBhIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9IiwiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG4jY29udGFpbmVyIHAge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xuICBjb2xvcjogIzhjOGM4YztcbiAgbWFyZ2luOiAwO1xufVxuXG4jY29udGFpbmVyIGEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { NavParams } from '@ionic/angular';\r\nimport { ModalController } from '@ionic/angular';\r\n@Component({\r\n  selector: 'app-setting',\r\n  templateUrl: './setting.component.html',\r\n  styleUrls: ['./setting.component.scss'],\r\n})\r\nexport class SettingComponent implements OnInit {\r\n  public color: string;\r\n  constructor(\r\n    private navparams: NavParams,\r\n    private modal:ModalController,\r\n  ){}\r\n\r\n  ngOnInit() {\r\n    if(this.navparams.get(\"color\") == true){\r\n      this.color = \"Ligth\";\r\n    }\r\n    else{\r\n      this.color = \"Dark\";\r\n    }\r\n  }\r\n  \r\n  closeSetting(){\r\n    this.modal.dismiss();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomePage } from './home.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomePage,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HomePageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HomePage } from './home.page';\r\n\r\nimport { HomePageRoutingModule } from './home-routing.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    HomePageRoutingModule\r\n  ],\r\n  declarations: [HomePage]\r\n})\r\nexport class HomePageModule {}\r\n","export default \"#container {\\n  text-align: center;\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n#container strong {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n#container p {\\n  font-size: 16px;\\n  line-height: 22px;\\n  color: #8c8c8c;\\n  margin: 0;\\n}\\n\\n#container a {\\n  text-decoration: none;\\n}\\n\\nion-fab-button {\\n  display: inline-flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaG9tZS9DOlxcVXNlcnNcXHNlcmdpXFxEZXNrdG9wXFw4IFNFTUVTVFJFXFxEZXNhcnJvbGxvIGRlIEFwbGljYWNpb25lcyBNb2JpbGVzXFxJT1RfTU9CSUxFX0xPU1BST1Mvc3JjXFxhcHBcXGhvbWVcXGhvbWUucGFnZS5zY3NzIiwic3JjL2FwcC9ob21lL2hvbWUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usa0JBQUE7RUFDQSxrQkFBQTtFQUNBLE9BQUE7RUFDQSxRQUFBO0VBQ0EsUUFBQTtFQUNBLDJCQUFBO0FDQ0Y7O0FERUE7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUNDRjs7QURFQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtFQUVBLGNBQUE7RUFFQSxTQUFBO0FDREY7O0FESUE7RUFDRSxxQkFBQTtBQ0RGOztBREdBO0VBQ0Usb0JBQUE7RUFDQSx1QkFBQTtBQ0FGIiwiZmlsZSI6InNyYy9hcHAvaG9tZS9ob21lLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogMDtcclxuICByaWdodDogMDtcclxuICB0b3A6IDUwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbn1cclxuXHJcbiNjb250YWluZXIgc3Ryb25nIHtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XHJcbn1cclxuXHJcbiNjb250YWluZXIgcCB7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG5cclxuICBjb2xvcjogIzhjOGM4YztcclxuXHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG4jY29udGFpbmVyIGEge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxufVxyXG5pb24tZmFiLWJ1dHRvbntcclxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufSIsIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG59XG5cbiNjb250YWluZXIgc3Ryb25nIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjZweDtcbn1cblxuI2NvbnRhaW5lciBwIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMjJweDtcbiAgY29sb3I6ICM4YzhjOGM7XG4gIG1hcmdpbjogMDtcbn1cblxuI2NvbnRhaW5lciBhIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5pb24tZmFiLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn0iXX0= */\";","import { Component } from '@angular/core';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { ModalController } from '@ionic/angular';\r\nimport { Router } from \"@angular/router\";\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { IotService } from '../services/iot.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { ControlComponent } from '../componentsIoT/control/control.component';\r\nimport { MonitorComponent } from '../componentsIoT/monitor/monitor.component';\r\nimport { SettingComponent } from '../componentsIoT/setting/setting.component';\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage {\r\n  public uid:string;\r\n  public data:any = {};\r\n  public name:string=\"\";\r\n  public setting:boolean;\r\n  public monitor:number;\r\n  constructor(\r\n    public auth:AuthService,\r\n    public iotService: IotService,\r\n    private router:Router,\r\n    private modal:ModalController,\r\n    private AFauth : AngularFireAuth\r\n    ) {}\r\n    OnLogOut(){\r\n      this.auth.logout();\r\n    }\r\n    ngOnInit(){\r\n      this.AFauth.authState.subscribe(data => {\r\n        this.uid =  data.uid;\r\n        this.iotService.consultId(this.uid).subscribe(resultado => {\r\n          this.data = resultado.payload.data()\r\n          this.setting = this.data.setting;\r\n          this.name = this.data.name;\r\n          this.monitor = this.data.monitor;\r\n        });\r\n      });\r\n      \r\n    };\r\n    openControl(){\r\n      this.modal.create({\r\n        component: ControlComponent,\r\n        componentProps:{\r\n          uid: this.uid\r\n        }\r\n      }).then((modal)=>modal.present())\r\n    };\r\n    openMonitor(){\r\n      this.modal.create({\r\n        component: MonitorComponent,\r\n        componentProps:{\r\n          temp: this.monitor,\r\n          uid: this.uid\r\n        }\r\n      }).then((modal)=>modal.present())\r\n    };\r\n    openSetting(){\r\n      this.modal.create({\r\n        component: SettingComponent,\r\n        componentProps:{\r\n          color: this.setting\r\n        }\r\n      }).then((modal)=>modal.present())\r\n    };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { Router } from \"@angular/router\";\r\nimport { AngularFireAuth } from \"@angular/fire/auth\";\r\n\r\ndeclare let toastr:any\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IotService {\r\n\r\n  constructor(\r\n    private AFauth : AngularFireAuth,\r\n    private router : Router,\r\n    private db: AngularFirestore,\r\n    ){}\r\n    consultId(uid : string){\r\n      return this.db.collection('users').doc(uid).snapshotChanges()\r\n        /*return new Promise ((resolve, reject) => {\r\n          .then( res =>{\r\n            // console.log(res.user.uid);\r\n          const uid = res.user.uid;\r\n            this.db.collection('users').doc(uid).set({\r\n              name : name,\r\n              uid : uid\r\n            })\r\n          resolve(res)\r\n        }).catch( err => reject(err))\r\n      })*/\r\n    }\r\n    success(message: string, title?: string){\r\n      toastr.success(message, title)\r\n    }\r\n    info(message: string, title?: string){\r\n        toastr.info(message, title)\r\n    }\r\n    error(message: string, title?: string){\r\n        toastr.error(message, title)\r\n    }\r\n    warning(message: string, title?: string){\r\n        toastr.warning(message, title)\r\n    }\r\n}"],"sourceRoot":"webpack:///"}